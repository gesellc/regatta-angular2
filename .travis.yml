sudo: required
dist: trusty

language: python

python:
  - "3.4"
  - "3.5"

env:
  global:
    - DOCKER_CERT_PATH=cloud_hero
    - DOCKER_HOST=tcp://swarm3956.chapi.co:8443
    - DOCKER_TLS_VERIFY=1

before_install:
  # Decrypt cloudhero key
  - openssl aes-256-cbc -K $encrypted_66e01c2c6c83_key -iv $encrypted_66e01c2c6c83_iv -in docker/cloud_hero/key.pem.enc -out docker/cloud_hero/key.pem -d
  # 2 lines of workaround as proposed here: https://github.com/travis-ci/travis-ci/issues/6928#issuecomment-264227708
  - source /opt/jdk_switcher/jdk_switcher.sh
  - jdk_switcher use oraclejdk8

install:
  # Travis specific install
  - sudo sh -c 'curl https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -'
  - sudo sh -c 'curl https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list > /etc/apt/sources.list.d/dart_stable.list'
  - sudo apt-get update
  - sudo apt-get install dart
  - export PATH=$PATH:/usr/lib/dart/bin
  # Install Dartium
  - wget https://storage.googleapis.com/dart-archive/channels/stable/release/latest/dartium/dartium-linux-x64-release.zip
  - unzip dartium-linux-x64-release.zip
  - rm dartium-linux-x64-release.zip
  - mv `echo dartium-*-stable-*`/{chrome,dartium}
  - export PATH="${PWD%/}/$(echo dartium-*-stable-*):$PATH"
  # General install
  - (cd backend  && make env)
  - (cd backend  && make install_tools)
  - (cd backend  && make install)
  - (cd frontend && make install)
  # Prepare e2e test tools
  #- (cd e2e_tests  && make install)

before_script:
  # Static analysis
  - (cd backend  && make lint)
  - (cd frontend && make lint)
  - (cd frontend && make style)
  # e2e test preparation
  - export DISPLAY=:99.0
  - sh -e /etc/init.d/xvfb start
  - (cd backend   && make run > django-server.log 2>&1 &)
  - (cd frontend  && make run > angular-server.log 2>&1 &)
  # necessary for pub server to become available
  - (cd frontend  && timeout 600 grep -q 'Build completed' <(tail -f angular-server.log))

script:
  - (cd backend   && make tests)
  - (cd frontend  && make dtests)
  #- (cd e2e_tests && make run > webdriver.log 2>&1 &)
  # necessary for webdriver to become available
  - sleep 3 && echo sleep done
  #- (cd e2e_tests && make tests)

after_success:
  - (cd backend && coveralls)

after_script:
  - (cd backend && cat django-server.log)
  - (cd frontend && cat angular-server.log)
  #- (cd e2e_tests && cat webdriver.log)

deploy:
  provider: script
  script: ./deploy.sh
  skip_cleanup: true
  on:
    all_branches: true
    python: 3.4
